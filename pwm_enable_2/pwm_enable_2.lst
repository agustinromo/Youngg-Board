CCS PCM C Compiler, Version 4.104, 5967               17-ene-18 19:29

               Filename: C:\Users\VAIOPC\Documents\ADATA\Adquisicion\Youngg board\pwm_enable_2\pwm_enable_2.lst

               ROM used: 606 words (7%)
                         Largest free fragment is 2048
               RAM used: 12 (3%) at main() level
                         25 (7%) worst case
               Stack:    5 locations

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   125
0003:  NOP
.................... #include "C:\Users\VAIOPC\Documents\ADATA\Adquisicion\Youngg board\pwm_enable_2\pwm_enable_2.h" 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES HS                       //High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD) 
.................... #FUSES PUT                      //No Power Up Timer 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES RESERVED                 //Used to set the reserved FUSE bits 
....................  
.................... #use delay(clock=4000000) 
*
0077:  MOVLW  2B
0078:  MOVWF  04
0079:  BCF    03.7
007A:  MOVF   00,W
007B:  BTFSC  03.2
007C:  GOTO   08B
007D:  MOVLW  01
007E:  MOVWF  78
007F:  CLRF   77
0080:  DECFSZ 77,F
0081:  GOTO   080
0082:  DECFSZ 78,F
0083:  GOTO   07F
0084:  MOVLW  4A
0085:  MOVWF  77
0086:  DECFSZ 77,F
0087:  GOTO   086
0088:  GOTO   089
0089:  DECFSZ 00,F
008A:  GOTO   07D
008B:  RETURN
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                     The following have special meaning:               //// 
.................... ////                      \f  Clear display                                //// 
.................... ////                      \n  Go to start of second line                   //// 
.................... ////                      \b  Move back one position                       //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    BOOLEAN enable;           // on to an I/O port to gain 
....................    BOOLEAN rs;               // access to the LCD pins. 
....................    BOOLEAN rw;               // The bits are allocated from 
....................    BOOLEAN unused;           // low order up.  ENABLE will 
....................    int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... BYTE lcd_read_nibble(void); 
....................  
.................... BYTE lcd_read_byte(void) 
.................... { 
....................    BYTE low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
002B:  MOVLW  0F
002C:  BSF    03.5
002D:  ANDWF  08,W
002E:  IORLW  F0
002F:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0030:  BCF    03.5
0031:  BSF    08.2
....................    delay_cycles(1); 
0032:  NOP
....................    lcd_output_enable(1); 
0033:  BSF    08.0
....................    delay_cycles(1); 
0034:  NOP
....................    high = lcd_read_nibble(); 
0035:  CALL   018
0036:  MOVF   78,W
0037:  MOVWF  32
....................        
....................    lcd_output_enable(0); 
0038:  BCF    08.0
....................    delay_cycles(1); 
0039:  NOP
....................    lcd_output_enable(1); 
003A:  BSF    08.0
....................    delay_us(1); 
003B:  NOP
....................    low = lcd_read_nibble(); 
003C:  CALL   018
003D:  MOVF   78,W
003E:  MOVWF  31
....................        
....................    lcd_output_enable(0); 
003F:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0040:  MOVLW  0F
0041:  BSF    03.5
0042:  ANDWF  08,W
0043:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0044:  BCF    03.5
0045:  SWAPF  32,W
0046:  MOVWF  77
0047:  MOVLW  F0
0048:  ANDWF  77,F
0049:  MOVF   77,W
004A:  IORWF  31,W
004B:  MOVWF  78
.................... } 
....................  
.................... BYTE lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    BYTE n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0018:  MOVF   08,W
0019:  MOVWF  77
001A:  SWAPF  08,W
001B:  ANDLW  0F
001C:  MOVWF  78
....................   #endif 
.................... } 
001D:  RETURN
....................  
.................... void lcd_send_nibble(BYTE n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
001E:  SWAPF  32,W
001F:  ANDLW  F0
0020:  MOVWF  77
0021:  MOVLW  0F
0022:  ANDWF  08,W
0023:  IORWF  77,W
0024:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0025:  NOP
....................    lcd_output_enable(1); 
0026:  BSF    08.0
....................    delay_us(2); 
0027:  GOTO   028
....................    lcd_output_enable(0); 
0028:  BCF    08.0
.................... } 
0029:  RETURN
....................  
.................... void lcd_send_byte(BYTE address, BYTE n) 
.................... { 
....................    lcd_output_rs(0); 
002A:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
004C:  MOVF   78,W
004D:  MOVWF  31
004E:  BTFSC  31.7
004F:  GOTO   02B
....................    lcd_output_rs(address); 
0050:  BTFSS  2F.0
0051:  BCF    08.1
0052:  BTFSC  2F.0
0053:  BSF    08.1
....................    delay_cycles(1); 
0054:  NOP
....................    lcd_output_rw(0); 
0055:  BCF    08.2
....................    delay_cycles(1); 
0056:  NOP
....................    lcd_output_enable(0); 
0057:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
0058:  SWAPF  30,W
0059:  MOVWF  31
005A:  MOVLW  0F
005B:  ANDWF  31,F
005C:  MOVF   31,W
005D:  MOVWF  32
005E:  CALL   01E
....................    lcd_send_nibble(n & 0xf); 
005F:  MOVF   30,W
0060:  ANDLW  0F
0061:  MOVWF  31
0062:  MOVWF  32
0063:  CALL   01E
.................... } 
0064:  RETURN
....................  
.................... void lcd_init(void)  
.................... { 
....................    BYTE i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
*
00B1:  MOVLW  0F
00B2:  BSF    03.5
00B3:  ANDWF  08,W
00B4:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
00B5:  BCF    08.0
....................    lcd_rs_tris(); 
00B6:  BCF    08.1
....................    lcd_rw_tris(); 
00B7:  BCF    08.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
00B8:  BCF    03.5
00B9:  BCF    08.1
....................    lcd_output_rw(0); 
00BA:  BCF    08.2
....................    lcd_output_enable(0); 
00BB:  BCF    08.0
....................      
....................    delay_ms(15); 
00BC:  MOVLW  0F
00BD:  MOVWF  2B
00BE:  CALL   077
....................    for(i=1;i<=3;++i) 
00BF:  MOVLW  01
00C0:  MOVWF  27
00C1:  MOVF   27,W
00C2:  SUBLW  03
00C3:  BTFSS  03.0
00C4:  GOTO   0CD
....................    { 
....................        lcd_send_nibble(3); 
00C5:  MOVLW  03
00C6:  MOVWF  32
00C7:  CALL   01E
....................        delay_ms(5); 
00C8:  MOVLW  05
00C9:  MOVWF  2B
00CA:  CALL   077
....................    } 
00CB:  INCF   27,F
00CC:  GOTO   0C1
....................      
....................    lcd_send_nibble(2); 
00CD:  MOVLW  02
00CE:  MOVWF  32
00CF:  CALL   01E
....................    for(i=0;i<=3;++i) 
00D0:  CLRF   27
00D1:  MOVF   27,W
00D2:  SUBLW  03
00D3:  BTFSS  03.0
00D4:  GOTO   0DE
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00D5:  MOVF   27,W
00D6:  CALL   004
00D7:  MOVWF  28
00D8:  CLRF   2F
00D9:  MOVF   28,W
00DA:  MOVWF  30
00DB:  CALL   02A
00DC:  INCF   27,F
00DD:  GOTO   0D1
.................... } 
00DE:  RETURN
....................  
.................... void lcd_gotoxy(BYTE x, BYTE y) 
.................... { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
*
0065:  DECFSZ 2C,W
0066:  GOTO   068
0067:  GOTO   06B
....................       address=LCD_LINE_TWO; 
0068:  MOVLW  40
0069:  MOVWF  2D
....................    else 
006A:  GOTO   06C
....................       address=0; 
006B:  CLRF   2D
....................       
....................    address+=x-1; 
006C:  MOVLW  01
006D:  SUBWF  2B,W
006E:  ADDWF  2D,F
....................    lcd_send_byte(0,0x80|address); 
006F:  MOVF   2D,W
0070:  IORLW  80
0071:  MOVWF  2E
0072:  CLRF   2F
0073:  MOVF   2E,W
0074:  MOVWF  30
0075:  CALL   02A
.................... } 
0076:  RETURN
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
....................    { 
*
008C:  MOVF   2A,W
008D:  XORLW  0C
008E:  BTFSC  03.2
008F:  GOTO   097
0090:  XORLW  06
0091:  BTFSC  03.2
0092:  GOTO   09F
0093:  XORLW  02
0094:  BTFSC  03.2
0095:  GOTO   0A5
0096:  GOTO   0AA
....................       case '\f'   :  lcd_send_byte(0,1); 
0097:  CLRF   2F
0098:  MOVLW  01
0099:  MOVWF  30
009A:  CALL   02A
....................                      delay_ms(2); 
009B:  MOVLW  02
009C:  MOVWF  2B
009D:  CALL   077
....................                      break; 
009E:  GOTO   0B0
....................                       
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
009F:  MOVLW  01
00A0:  MOVWF  2B
00A1:  MOVLW  02
00A2:  MOVWF  2C
00A3:  CALL   065
00A4:  GOTO   0B0
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
00A5:  CLRF   2F
00A6:  MOVLW  10
00A7:  MOVWF  30
00A8:  CALL   02A
00A9:  GOTO   0B0
....................       
....................       default     : lcd_send_byte(1,c);     break; 
00AA:  MOVLW  01
00AB:  MOVWF  2F
00AC:  MOVF   2A,W
00AD:  MOVWF  30
00AE:  CALL   02A
00AF:  GOTO   0B0
....................    } 
.................... } 
00B0:  RETURN
....................   
.................... char lcd_getc(BYTE x, BYTE y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
....................   #define LCD_ENABLE_PIN PIN_D0  
....................   #define LCD_RS_PIN     PIN_D1  
....................   #define LCD_RW_PIN     PIN_D2 
....................   #define LCD_DATA4      PIN_D4  
....................   #define LCD_DATA5      PIN_D5  
....................   #define LCD_DATA6      PIN_D6  
....................   #define LCD_DATA7      PIN_D7  
....................  
....................  
....................  
....................   #ZERO_RAM 
....................  
.................... int16 pot=0;  
.................... int8 boton,boton2=0; 
.................... int Timer2,Poscaler; 
.................... void main() 
.................... { 
*
0017:  DATA 00,00
*
0125:  MOVF   03,W
0126:  ANDLW  1F
0127:  MOVWF  03
0128:  MOVLW  57
0129:  MOVWF  77
012A:  MOVLW  20
012B:  MOVWF  04
012C:  BCF    03.7
012D:  CLRF   00
012E:  INCF   04,F
012F:  DECFSZ 77,F
0130:  GOTO   12D
0131:  CLRF   78
0132:  CLRF   79
0133:  CLRF   7A
0134:  CLRF   7B
0135:  CLRF   7C
0136:  CLRF   7D
0137:  CLRF   7E
0138:  MOVLW  50
0139:  MOVWF  77
013A:  MOVLW  A0
013B:  MOVWF  04
013C:  BCF    03.7
013D:  CLRF   00
013E:  INCF   04,F
013F:  DECFSZ 77,F
0140:  GOTO   13D
0141:  MOVLW  60
0142:  MOVWF  77
0143:  MOVLW  10
0144:  MOVWF  04
0145:  BSF    03.7
0146:  CLRF   00
0147:  INCF   04,F
0148:  DECFSZ 77,F
0149:  GOTO   146
014A:  BCF    03.7
014B:  MOVLW  60
014C:  MOVWF  77
014D:  MOVLW  90
014E:  MOVWF  04
014F:  BSF    03.7
0150:  CLRF   00
0151:  INCF   04,F
0152:  DECFSZ 77,F
0153:  GOTO   150
0154:  BCF    03.7
0155:  CLRF   20
0156:  CLRF   04
0157:  BCF    03.7
0158:  MOVLW  1F
0159:  ANDWF  03,F
015A:  CLRF   21
015B:  CLRF   20
015C:  CLRF   23
015D:  BSF    03.5
015E:  BSF    1F.0
015F:  BSF    1F.1
0160:  BSF    1F.2
0161:  BCF    1F.3
0162:  MOVLW  07
0163:  MOVWF  1C
....................    Timer2=249; 
*
0167:  MOVLW  F9
0168:  MOVWF  24
....................    Poscaler=1;  
0169:  MOVLW  01
016A:  MOVWF  25
....................    setup_timer_2(T2_DIV_BY_16,255,1);    // 819 us overflow  
016B:  MOVLW  00
016C:  MOVWF  78
016D:  IORLW  06
016E:  MOVWF  12
016F:  MOVLW  FF
0170:  BSF    03.5
0171:  MOVWF  12
....................    setup_ccp1(ccp_pwm);  
0172:  BCF    03.5
0173:  BCF    26.2
0174:  MOVF   26,W
0175:  BSF    03.5
0176:  MOVWF  07
0177:  BCF    03.5
0178:  BCF    07.2
0179:  MOVLW  0C
017A:  MOVWF  17
....................    setup_ccp2(ccp_pwm);  
017B:  BCF    26.1
017C:  MOVF   26,W
017D:  BSF    03.5
017E:  MOVWF  07
017F:  BCF    03.5
0180:  BCF    07.1
0181:  MOVLW  0C
0182:  MOVWF  1D
....................    set_pwm1_duty(0);         
0183:  CLRF   15
....................    set_pwm2_duty(0); 
0184:  CLRF   1B
....................    setup_adc_ports(all_analog); 
0185:  BSF    03.5
0186:  BCF    1F.0
0187:  BCF    1F.1
0188:  BCF    1F.2
0189:  BCF    1F.3
....................    setup_adc(adc_clock_internal); 
018A:  BCF    1F.6
018B:  BCF    03.5
018C:  BSF    1F.6
018D:  BSF    1F.7
018E:  BSF    03.5
018F:  BCF    1F.7
0190:  BCF    03.5
0191:  BSF    1F.0
....................  
....................    // TODO: USER CODE!!  
....................    while(true){  
....................  boton = input(PIN_B0); 
0192:  BSF    03.5
0193:  BSF    06.0
0194:  BCF    03.5
0195:  CLRF   22
0196:  BTFSC  06.0
0197:  INCF   22,F
....................  boton2 = input(PIN_B1); 
0198:  BSF    03.5
0199:  BSF    06.1
019A:  BCF    03.5
019B:  CLRF   23
019C:  BTFSC  06.1
019D:  INCF   23,F
....................  if(boton == 1 && boton2 == 0 ) 
019E:  DECFSZ 22,W
019F:  GOTO   1DA
01A0:  MOVF   23,F
01A1:  BTFSS  03.2
01A2:  GOTO   1DA
....................  {  
....................   set_adc_channel(0);  
01A3:  MOVLW  00
01A4:  MOVWF  78
01A5:  MOVF   1F,W
01A6:  ANDLW  C7
01A7:  IORWF  78,W
01A8:  MOVWF  1F
....................   delay_us(100);  
01A9:  MOVLW  21
01AA:  MOVWF  77
01AB:  DECFSZ 77,F
01AC:  GOTO   1AB
....................   pot=read_adc();  
01AD:  BSF    1F.2
01AE:  BTFSC  1F.2
01AF:  GOTO   1AE
01B0:  MOVF   1E,W
01B1:  CLRF   21
01B2:  MOVWF  20
....................   set_pwm2_duty(pot);  
01B3:  MOVF   21,W
01B4:  MOVWF  79
01B5:  MOVF   20,W
01B6:  MOVWF  78
01B7:  RRF    79,F
01B8:  RRF    78,F
01B9:  RRF    79,F
01BA:  RRF    78,F
01BB:  RRF    79,F
01BC:  MOVF   78,W
01BD:  MOVWF  1B
01BE:  RRF    79,F
01BF:  RRF    79,W
01C0:  ANDLW  30
01C1:  MOVWF  77
01C2:  MOVF   1D,W
01C3:  ANDLW  CF
01C4:  IORWF  77,W
01C5:  MOVWF  1D
....................   output_high(PIN_C4); 
01C6:  BCF    26.4
01C7:  MOVF   26,W
01C8:  BSF    03.5
01C9:  MOVWF  07
01CA:  BCF    03.5
01CB:  BSF    07.4
....................   output_low(PIN_C5);  
01CC:  BCF    26.5
01CD:  MOVF   26,W
01CE:  BSF    03.5
01CF:  MOVWF  07
01D0:  BCF    03.5
01D1:  BCF    07.5
....................   lcd_gotoxy(3,1); 
01D2:  MOVLW  03
01D3:  MOVWF  2B
01D4:  MOVLW  01
01D5:  MOVWF  2C
01D6:  CALL   065
....................        printf(lcd_putc," "); 
01D7:  MOVLW  20
01D8:  MOVWF  2A
01D9:  CALL   08C
....................  }  
....................   if(boton2 == 1 && boton == 0 ) 
01DA:  DECFSZ 23,W
01DB:  GOTO   216
01DC:  MOVF   22,F
01DD:  BTFSS  03.2
01DE:  GOTO   216
....................   {  
....................    set_adc_channel(0);  
01DF:  MOVLW  00
01E0:  MOVWF  78
01E1:  MOVF   1F,W
01E2:  ANDLW  C7
01E3:  IORWF  78,W
01E4:  MOVWF  1F
....................    delay_us(100);  
01E5:  MOVLW  21
01E6:  MOVWF  77
01E7:  DECFSZ 77,F
01E8:  GOTO   1E7
....................    pot=read_adc();  
01E9:  BSF    1F.2
01EA:  BTFSC  1F.2
01EB:  GOTO   1EA
01EC:  MOVF   1E,W
01ED:  CLRF   21
01EE:  MOVWF  20
....................    set_pwm2_duty(pot);  
01EF:  MOVF   21,W
01F0:  MOVWF  79
01F1:  MOVF   20,W
01F2:  MOVWF  78
01F3:  RRF    79,F
01F4:  RRF    78,F
01F5:  RRF    79,F
01F6:  RRF    78,F
01F7:  RRF    79,F
01F8:  MOVF   78,W
01F9:  MOVWF  1B
01FA:  RRF    79,F
01FB:  RRF    79,W
01FC:  ANDLW  30
01FD:  MOVWF  77
01FE:  MOVF   1D,W
01FF:  ANDLW  CF
0200:  IORWF  77,W
0201:  MOVWF  1D
....................    output_high(PIN_C4);  
0202:  BCF    26.4
0203:  MOVF   26,W
0204:  BSF    03.5
0205:  MOVWF  07
0206:  BCF    03.5
0207:  BSF    07.4
....................    output_low(PIN_C5);  
0208:  BCF    26.5
0209:  MOVF   26,W
020A:  BSF    03.5
020B:  MOVWF  07
020C:  BCF    03.5
020D:  BCF    07.5
....................    lcd_gotoxy(3,1); 
020E:  MOVLW  03
020F:  MOVWF  2B
0210:  MOVLW  01
0211:  MOVWF  2C
0212:  CALL   065
....................        printf(lcd_putc," "); 
0213:  MOVLW  20
0214:  MOVWF  2A
0215:  CALL   08C
....................    }   
....................    if(boton == 0 && boton2 == 0)  
0216:  MOVF   22,F
0217:  BTFSS  03.2
0218:  GOTO   232
0219:  MOVF   23,F
021A:  BTFSS  03.2
021B:  GOTO   232
....................    { 
....................     set_pwm2_duty(0); 
021C:  CLRF   1B
....................     output_low(PIN_C4);  
021D:  BCF    26.4
021E:  MOVF   26,W
021F:  BSF    03.5
0220:  MOVWF  07
0221:  BCF    03.5
0222:  BCF    07.4
....................     output_low(PIN_C5);  
0223:  BCF    26.5
0224:  MOVF   26,W
0225:  BSF    03.5
0226:  MOVWF  07
0227:  BCF    03.5
0228:  BCF    07.5
....................     lcd_init(); 
0229:  CALL   0B1
....................        lcd_gotoxy(3,1); 
022A:  MOVLW  03
022B:  MOVWF  2B
022C:  MOVLW  01
022D:  MOVWF  2C
022E:  CALL   065
....................        printf(lcd_putc," ");  
022F:  MOVLW  20
0230:  MOVWF  2A
0231:  CALL   08C
....................    }  
....................     if(boton == 1 && boton2 == 1)  
0232:  DECFSZ 22,W
0233:  GOTO   25C
0234:  DECFSZ 23,W
0235:  GOTO   25C
....................    { 
....................     set_pwm2_duty(0); 
0236:  CLRF   1B
....................     output_low(PIN_C4);  
0237:  BCF    26.4
0238:  MOVF   26,W
0239:  BSF    03.5
023A:  MOVWF  07
023B:  BCF    03.5
023C:  BCF    07.4
....................     output_low(PIN_C5);  
023D:  BCF    26.5
023E:  MOVF   26,W
023F:  BSF    03.5
0240:  MOVWF  07
0241:  BCF    03.5
0242:  BCF    07.5
....................      lcd_init(); 
0243:  CALL   0B1
....................        lcd_gotoxy(3,1); 
0244:  MOVLW  03
0245:  MOVWF  2B
0246:  MOVLW  01
0247:  MOVWF  2C
0248:  CALL   065
....................        printf(lcd_putc,"ey ey ey");  
0249:  MOVLW  0C
024A:  BSF    03.6
024B:  MOVWF  0D
024C:  MOVLW  00
024D:  MOVWF  0F
024E:  BCF    03.6
024F:  CALL   0DF
....................        lcd_gotoxy(3,2); 
0250:  MOVLW  03
0251:  MOVWF  2B
0252:  MOVLW  02
0253:  MOVWF  2C
0254:  CALL   065
....................        printf(lcd_putc,"calmado PUTO"); 
0255:  MOVLW  11
0256:  BSF    03.6
0257:  MOVWF  0D
0258:  MOVLW  00
0259:  MOVWF  0F
025A:  BCF    03.6
025B:  CALL   0DF
....................    } 
....................  }  
025C:  GOTO   192
....................  }  
....................  
025D:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NODEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT
