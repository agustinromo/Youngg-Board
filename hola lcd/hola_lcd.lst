CCS PCM C Compiler, Version 4.104, 5967               20-dic-17 20:29

               Filename: C:\Users\VAIOPC\Documents\ADATA\Adquisicion\Youngg board\hola lcd\hola_lcd.lst

               ROM used: 449 words (5%)
                         Largest free fragment is 2048
               RAM used: 6 (2%) at main() level
                         19 (5%) worst case
               Stack:    6 locations

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   17F
0003:  NOP
.................... #include "C:\Users\VAIOPC\Documents\ADATA\Adquisicion\Youngg board\hola lcd\hola_lcd.h" 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES HS                       //High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD) 
.................... #FUSES PUT                      //Power Up Timer 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES RESERVED                 //Used to set the reserved FUSE bits 
....................  
.................... #use delay(clock=4000000) 
*
0057:  MOVLW  25
0058:  MOVWF  04
0059:  BCF    03.7
005A:  MOVF   00,W
005B:  BTFSC  03.2
005C:  GOTO   06B
005D:  MOVLW  01
005E:  MOVWF  78
005F:  CLRF   77
0060:  DECFSZ 77,F
0061:  GOTO   060
0062:  DECFSZ 78,F
0063:  GOTO   05F
0064:  MOVLW  4A
0065:  MOVWF  77
0066:  DECFSZ 77,F
0067:  GOTO   066
0068:  GOTO   069
0069:  DECFSZ 00,F
006A:  GOTO   05D
006B:  RETURN
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                     The following have special meaning:               //// 
.................... ////                      \f  Clear display                                //// 
.................... ////                      \n  Go to start of second line                   //// 
.................... ////                      \b  Move back one position                       //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    BOOLEAN enable;           // on to an I/O port to gain 
....................    BOOLEAN rs;               // access to the LCD pins. 
....................    BOOLEAN rw;               // The bits are allocated from 
....................    BOOLEAN unused;           // low order up.  ENABLE will 
....................    int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... BYTE lcd_read_nibble(void); 
....................  
.................... BYTE lcd_read_byte(void) 
.................... { 
....................    BYTE low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
007F:  MOVLW  0F
0080:  BSF    03.5
0081:  ANDWF  08,W
0082:  IORLW  F0
0083:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0084:  BCF    03.5
0085:  BSF    08.2
....................    delay_cycles(1); 
0086:  NOP
....................    lcd_output_enable(1); 
0087:  BSF    08.0
....................    delay_cycles(1); 
0088:  NOP
....................    high = lcd_read_nibble(); 
0089:  CALL   078
008A:  MOVF   78,W
008B:  MOVWF  2C
....................        
....................    lcd_output_enable(0); 
008C:  BCF    08.0
....................    delay_cycles(1); 
008D:  NOP
....................    lcd_output_enable(1); 
008E:  BSF    08.0
....................    delay_us(1); 
008F:  NOP
....................    low = lcd_read_nibble(); 
0090:  CALL   078
0091:  MOVF   78,W
0092:  MOVWF  2B
....................        
....................    lcd_output_enable(0); 
0093:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0094:  MOVLW  0F
0095:  BSF    03.5
0096:  ANDWF  08,W
0097:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0098:  BCF    03.5
0099:  SWAPF  2C,W
009A:  MOVWF  77
009B:  MOVLW  F0
009C:  ANDWF  77,F
009D:  MOVF   77,W
009E:  IORWF  2B,W
009F:  MOVWF  78
.................... } 
....................  
.................... BYTE lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    BYTE n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0078:  MOVF   08,W
0079:  MOVWF  77
007A:  SWAPF  08,W
007B:  ANDLW  0F
007C:  MOVWF  78
....................   #endif 
.................... } 
007D:  RETURN
....................  
.................... void lcd_send_nibble(BYTE n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
006C:  SWAPF  2C,W
006D:  ANDLW  F0
006E:  MOVWF  77
006F:  MOVLW  0F
0070:  ANDWF  08,W
0071:  IORWF  77,W
0072:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0073:  NOP
....................    lcd_output_enable(1); 
0074:  BSF    08.0
....................    delay_us(2); 
0075:  GOTO   076
....................    lcd_output_enable(0); 
0076:  BCF    08.0
.................... } 
0077:  RETURN
....................  
.................... void lcd_send_byte(BYTE address, BYTE n) 
.................... { 
....................    lcd_output_rs(0); 
*
007E:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00A0:  MOVF   78,W
00A1:  MOVWF  2B
00A2:  BTFSC  2B.7
00A3:  GOTO   07F
....................    lcd_output_rs(address); 
00A4:  BTFSS  29.0
00A5:  BCF    08.1
00A6:  BTFSC  29.0
00A7:  BSF    08.1
....................    delay_cycles(1); 
00A8:  NOP
....................    lcd_output_rw(0); 
00A9:  BCF    08.2
....................    delay_cycles(1); 
00AA:  NOP
....................    lcd_output_enable(0); 
00AB:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
00AC:  SWAPF  2A,W
00AD:  MOVWF  2B
00AE:  MOVLW  0F
00AF:  ANDWF  2B,F
00B0:  MOVF   2B,W
00B1:  MOVWF  2C
00B2:  CALL   06C
....................    lcd_send_nibble(n & 0xf); 
00B3:  MOVF   2A,W
00B4:  ANDLW  0F
00B5:  MOVWF  2B
00B6:  MOVWF  2C
00B7:  CALL   06C
.................... } 
00B8:  RETURN
....................  
.................... void lcd_init(void)  
.................... { 
....................    BYTE i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
*
0136:  MOVLW  0F
0137:  BSF    03.5
0138:  ANDWF  08,W
0139:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
013A:  BCF    08.0
....................    lcd_rs_tris(); 
013B:  BCF    08.1
....................    lcd_rw_tris(); 
013C:  BCF    08.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
013D:  BCF    03.5
013E:  BCF    08.1
....................    lcd_output_rw(0); 
013F:  BCF    08.2
....................    lcd_output_enable(0); 
0140:  BCF    08.0
....................      
....................    delay_ms(15); 
0141:  MOVLW  0F
0142:  MOVWF  25
0143:  CALL   057
....................    for(i=1;i<=3;++i) 
0144:  MOVLW  01
0145:  MOVWF  21
0146:  MOVF   21,W
0147:  SUBLW  03
0148:  BTFSS  03.0
0149:  GOTO   152
....................    { 
....................        lcd_send_nibble(3); 
014A:  MOVLW  03
014B:  MOVWF  2C
014C:  CALL   06C
....................        delay_ms(5); 
014D:  MOVLW  05
014E:  MOVWF  25
014F:  CALL   057
....................    } 
0150:  INCF   21,F
0151:  GOTO   146
....................      
....................    lcd_send_nibble(2); 
0152:  MOVLW  02
0153:  MOVWF  2C
0154:  CALL   06C
....................    for(i=0;i<=3;++i) 
0155:  CLRF   21
0156:  MOVF   21,W
0157:  SUBLW  03
0158:  BTFSS  03.0
0159:  GOTO   163
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
015A:  MOVF   21,W
015B:  CALL   004
015C:  MOVWF  22
015D:  CLRF   29
015E:  MOVF   22,W
015F:  MOVWF  2A
0160:  CALL   07E
0161:  INCF   21,F
0162:  GOTO   156
.................... } 
....................  
.................... void lcd_gotoxy(BYTE x, BYTE y) 
.................... { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
*
00B9:  DECFSZ 26,W
00BA:  GOTO   0BC
00BB:  GOTO   0BF
....................       address=LCD_LINE_TWO; 
00BC:  MOVLW  40
00BD:  MOVWF  27
....................    else 
00BE:  GOTO   0C0
....................       address=0; 
00BF:  CLRF   27
....................       
....................    address+=x-1; 
00C0:  MOVLW  01
00C1:  SUBWF  25,W
00C2:  ADDWF  27,F
....................    lcd_send_byte(0,0x80|address); 
00C3:  MOVF   27,W
00C4:  IORLW  80
00C5:  MOVWF  28
00C6:  CLRF   29
00C7:  MOVF   28,W
00C8:  MOVWF  2A
00C9:  CALL   07E
.................... } 
00CA:  RETURN
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
....................    { 
00CB:  MOVF   24,W
00CC:  XORLW  0C
00CD:  BTFSC  03.2
00CE:  GOTO   0D6
00CF:  XORLW  06
00D0:  BTFSC  03.2
00D1:  GOTO   0DE
00D2:  XORLW  02
00D3:  BTFSC  03.2
00D4:  GOTO   0E4
00D5:  GOTO   0E9
....................       case '\f'   :  lcd_send_byte(0,1); 
00D6:  CLRF   29
00D7:  MOVLW  01
00D8:  MOVWF  2A
00D9:  CALL   07E
....................                      delay_ms(2); 
00DA:  MOVLW  02
00DB:  MOVWF  25
00DC:  CALL   057
....................                      break; 
00DD:  GOTO   0EF
....................                       
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00DE:  MOVLW  01
00DF:  MOVWF  25
00E0:  MOVLW  02
00E1:  MOVWF  26
00E2:  CALL   0B9
00E3:  GOTO   0EF
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
00E4:  CLRF   29
00E5:  MOVLW  10
00E6:  MOVWF  2A
00E7:  CALL   07E
00E8:  GOTO   0EF
....................       
....................       default     : lcd_send_byte(1,c);     break; 
00E9:  MOVLW  01
00EA:  MOVWF  29
00EB:  MOVF   24,W
00EC:  MOVWF  2A
00ED:  CALL   07E
00EE:  GOTO   0EF
....................    } 
.................... } 
00EF:  RETURN
....................   
.................... char lcd_getc(BYTE x, BYTE y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
....................   #define LCD_ENABLE_PIN PIN_D0  
....................   #define LCD_RS_PIN     PIN_D1  
....................   #define LCD_RW_PIN     PIN_D2 
....................   #define LCD_DATA4      PIN_D4  
....................   #define LCD_DATA5      PIN_D5  
....................   #define LCD_DATA6      PIN_D6  
....................   #define LCD_DATA7      PIN_D7  
....................  
....................  
....................   #ZERO_RAM 
.................... void config();  
.................... void hola(); 
.................... void main() 
.................... {  
*
017F:  MOVF   03,W
0180:  ANDLW  1F
0181:  MOVWF  03
0182:  MOVLW  57
0183:  MOVWF  77
0184:  MOVLW  20
0185:  MOVWF  04
0186:  BCF    03.7
0187:  CLRF   00
0188:  INCF   04,F
0189:  DECFSZ 77,F
018A:  GOTO   187
018B:  CLRF   78
018C:  CLRF   79
018D:  CLRF   7A
018E:  CLRF   7B
018F:  CLRF   7C
0190:  CLRF   7D
0191:  CLRF   7E
0192:  MOVLW  50
0193:  MOVWF  77
0194:  MOVLW  A0
0195:  MOVWF  04
0196:  BCF    03.7
0197:  CLRF   00
0198:  INCF   04,F
0199:  DECFSZ 77,F
019A:  GOTO   197
019B:  MOVLW  60
019C:  MOVWF  77
019D:  MOVLW  10
019E:  MOVWF  04
019F:  BSF    03.7
01A0:  CLRF   00
01A1:  INCF   04,F
01A2:  DECFSZ 77,F
01A3:  GOTO   1A0
01A4:  BCF    03.7
01A5:  MOVLW  60
01A6:  MOVWF  77
01A7:  MOVLW  90
01A8:  MOVWF  04
01A9:  BSF    03.7
01AA:  CLRF   00
01AB:  INCF   04,F
01AC:  DECFSZ 77,F
01AD:  GOTO   1AA
01AE:  BCF    03.7
01AF:  CLRF   20
01B0:  CLRF   04
01B1:  BCF    03.7
01B2:  MOVLW  1F
01B3:  ANDWF  03,F
01B4:  BSF    03.5
01B5:  BSF    1F.0
01B6:  BSF    1F.1
01B7:  BSF    1F.2
01B8:  BCF    1F.3
01B9:  MOVLW  07
01BA:  MOVWF  1C
....................  config(); 
*
01BE:  GOTO   015
....................  hola(); 
01BF:  GOTO   136
.................... } 
.................... void config() 
.................... { 
01C0:  SLEEP
....................    setup_adc_ports(NO_ANALOGS); 
*
0015:  BSF    03.5
0016:  BSF    1F.0
0017:  BSF    1F.1
0018:  BSF    1F.2
0019:  BCF    1F.3
....................    setup_adc(ADC_CLOCK_DIV_2); 
001A:  BCF    1F.6
001B:  BCF    03.5
001C:  BCF    1F.6
001D:  BCF    1F.7
001E:  BSF    03.5
001F:  BCF    1F.7
0020:  BCF    03.5
0021:  BSF    1F.0
....................    setup_psp(PSP_DISABLED); 
0022:  BSF    03.5
0023:  BCF    09.4
....................    setup_spi(SPI_SS_DISABLED); 
0024:  BCF    03.5
0025:  BCF    14.5
0026:  BCF    20.5
0027:  MOVF   20,W
0028:  BSF    03.5
0029:  MOVWF  07
002A:  BCF    03.5
002B:  BSF    20.4
002C:  MOVF   20,W
002D:  BSF    03.5
002E:  MOVWF  07
002F:  BCF    03.5
0030:  BCF    20.3
0031:  MOVF   20,W
0032:  BSF    03.5
0033:  MOVWF  07
0034:  MOVLW  01
0035:  BCF    03.5
0036:  MOVWF  14
0037:  MOVLW  00
0038:  BSF    03.5
0039:  MOVWF  14
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1); 
003A:  MOVF   01,W
003B:  ANDLW  C7
003C:  IORLW  08
003D:  MOVWF  01
....................    setup_timer_1(T1_DISABLED); 
003E:  BCF    03.5
003F:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1); 
0040:  MOVLW  00
0041:  MOVWF  78
0042:  MOVWF  12
0043:  MOVLW  00
0044:  BSF    03.5
0045:  MOVWF  12
....................    setup_comparator(NC_NC_NC_NC); 
0046:  MOVLW  07
0047:  MOVWF  1C
0048:  MOVF   05,W
0049:  MOVWF  05
004A:  MOVLW  03
004B:  MOVWF  77
004C:  DECFSZ 77,F
004D:  GOTO   04C
004E:  MOVF   1C,W
004F:  BCF    03.5
0050:  BCF    0D.6
....................    setup_vref(FALSE); 
0051:  BSF    03.5
0052:  CLRF   1D
....................    // TODO: USER CODE!! 
.................... }  
0053:  BCF    03.5
0054:  BCF    0A.3
0055:  BCF    0A.4
0056:  GOTO   1BF (RETURN)
.................... void hola() 
.................... {  
....................        while(true){      
....................        lcd_init(); 
....................        lcd_gotoxy(3,1); 
*
0163:  MOVLW  03
0164:  MOVWF  25
0165:  MOVLW  01
0166:  MOVWF  26
0167:  CALL   0B9
....................        printf(lcd_putc,"Hello");  
0168:  MOVLW  0C
0169:  BSF    03.6
016A:  MOVWF  0D
016B:  MOVLW  00
016C:  MOVWF  0F
016D:  BCF    03.6
016E:  CALL   0F0
....................        lcd_gotoxy(3,2); 
016F:  MOVLW  03
0170:  MOVWF  25
0171:  MOVLW  02
0172:  MOVWF  26
0173:  CALL   0B9
....................        printf(lcd_putc,"YounggBoard"); 
0174:  MOVLW  0F
0175:  BSF    03.6
0176:  MOVWF  0D
0177:  MOVLW  00
0178:  MOVWF  0F
0179:  BCF    03.6
017A:  CALL   0F0
....................        } 
017B:  GOTO   136
.................... } 
017C:  BCF    0A.3
017D:  BCF    0A.4
017E:  GOTO   1C0 (RETURN)

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NODEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT
