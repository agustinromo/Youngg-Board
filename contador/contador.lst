CCS PCM C Compiler, Version 4.104, 5967               05-jul.-19 16:03

               Filename: C:\Users\agustin\Documents\Youngg board\contador\contador.lst

               ROM used: 518 words (6%)
                         Largest free fragment is 2048
               RAM used: 9 (2%) at main() level
                         25 (7%) worst case
               Stack:    6 locations

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   1C4
0003:  NOP
.................... #include "C:\Users\agustin\Documents\Youngg board\contador\contador.h" 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES HS                       //High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD) 
.................... #FUSES PUT                      //Power Up Timer 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES RESERVED                 //Used to set the reserved FUSE bits 
....................  
.................... #use delay(clock=4000000) 
*
004E:  MOVLW  2B
004F:  MOVWF  04
0050:  BCF    03.7
0051:  MOVF   00,W
0052:  BTFSC  03.2
0053:  GOTO   062
0054:  MOVLW  01
0055:  MOVWF  78
0056:  CLRF   77
0057:  DECFSZ 77,F
0058:  GOTO   057
0059:  DECFSZ 78,F
005A:  GOTO   056
005B:  MOVLW  4A
005C:  MOVWF  77
005D:  DECFSZ 77,F
005E:  GOTO   05D
005F:  GOTO   060
0060:  DECFSZ 00,F
0061:  GOTO   054
0062:  RETURN
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                     The following have special meaning:               //// 
.................... ////                      \f  Clear display                                //// 
.................... ////                      \n  Go to start of second line                   //// 
.................... ////                      \b  Move back one position                       //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    BOOLEAN enable;           // on to an I/O port to gain 
....................    BOOLEAN rs;               // access to the LCD pins. 
....................    BOOLEAN rw;               // The bits are allocated from 
....................    BOOLEAN unused;           // low order up.  ENABLE will 
....................    int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... BYTE lcd_read_nibble(void); 
....................  
.................... BYTE lcd_read_byte(void) 
.................... { 
....................    BYTE low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0076:  MOVLW  0F
0077:  BSF    03.5
0078:  ANDWF  08,W
0079:  IORLW  F0
007A:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
007B:  BCF    03.5
007C:  BSF    08.2
....................    delay_cycles(1); 
007D:  NOP
....................    lcd_output_enable(1); 
007E:  BSF    08.0
....................    delay_cycles(1); 
007F:  NOP
....................    high = lcd_read_nibble(); 
0080:  CALL   06F
0081:  MOVF   78,W
0082:  MOVWF  32
....................        
....................    lcd_output_enable(0); 
0083:  BCF    08.0
....................    delay_cycles(1); 
0084:  NOP
....................    lcd_output_enable(1); 
0085:  BSF    08.0
....................    delay_us(1); 
0086:  NOP
....................    low = lcd_read_nibble(); 
0087:  CALL   06F
0088:  MOVF   78,W
0089:  MOVWF  31
....................        
....................    lcd_output_enable(0); 
008A:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
008B:  MOVLW  0F
008C:  BSF    03.5
008D:  ANDWF  08,W
008E:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
008F:  BCF    03.5
0090:  SWAPF  32,W
0091:  MOVWF  77
0092:  MOVLW  F0
0093:  ANDWF  77,F
0094:  MOVF   77,W
0095:  IORWF  31,W
0096:  MOVWF  78
.................... } 
....................  
.................... BYTE lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    BYTE n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
006F:  MOVF   08,W
0070:  MOVWF  77
0071:  SWAPF  08,W
0072:  ANDLW  0F
0073:  MOVWF  78
....................   #endif 
.................... } 
0074:  RETURN
....................  
.................... void lcd_send_nibble(BYTE n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0063:  SWAPF  32,W
0064:  ANDLW  F0
0065:  MOVWF  77
0066:  MOVLW  0F
0067:  ANDWF  08,W
0068:  IORWF  77,W
0069:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
006A:  NOP
....................    lcd_output_enable(1); 
006B:  BSF    08.0
....................    delay_us(2); 
006C:  GOTO   06D
....................    lcd_output_enable(0); 
006D:  BCF    08.0
.................... } 
006E:  RETURN
....................  
.................... void lcd_send_byte(BYTE address, BYTE n) 
.................... { 
....................    lcd_output_rs(0); 
*
0075:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0097:  MOVF   78,W
0098:  MOVWF  31
0099:  BTFSC  31.7
009A:  GOTO   076
....................    lcd_output_rs(address); 
009B:  BTFSS  2F.0
009C:  BCF    08.1
009D:  BTFSC  2F.0
009E:  BSF    08.1
....................    delay_cycles(1); 
009F:  NOP
....................    lcd_output_rw(0); 
00A0:  BCF    08.2
....................    delay_cycles(1); 
00A1:  NOP
....................    lcd_output_enable(0); 
00A2:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
00A3:  SWAPF  30,W
00A4:  MOVWF  31
00A5:  MOVLW  0F
00A6:  ANDWF  31,F
00A7:  MOVF   31,W
00A8:  MOVWF  32
00A9:  CALL   063
....................    lcd_send_nibble(n & 0xf); 
00AA:  MOVF   30,W
00AB:  ANDLW  0F
00AC:  MOVWF  31
00AD:  MOVWF  32
00AE:  CALL   063
.................... } 
00AF:  RETURN
....................  
.................... void lcd_init(void)  
.................... { 
....................    BYTE i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
*
0173:  MOVLW  0F
0174:  BSF    03.5
0175:  ANDWF  08,W
0176:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
0177:  BCF    08.0
....................    lcd_rs_tris(); 
0178:  BCF    08.1
....................    lcd_rw_tris(); 
0179:  BCF    08.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
017A:  BCF    03.5
017B:  BCF    08.1
....................    lcd_output_rw(0); 
017C:  BCF    08.2
....................    lcd_output_enable(0); 
017D:  BCF    08.0
....................      
....................    delay_ms(15); 
017E:  MOVLW  0F
017F:  MOVWF  2B
0180:  CALL   04E
....................    for(i=1;i<=3;++i) 
0181:  MOVLW  01
0182:  MOVWF  24
0183:  MOVF   24,W
0184:  SUBLW  03
0185:  BTFSS  03.0
0186:  GOTO   18F
....................    { 
....................        lcd_send_nibble(3); 
0187:  MOVLW  03
0188:  MOVWF  32
0189:  CALL   063
....................        delay_ms(5); 
018A:  MOVLW  05
018B:  MOVWF  2B
018C:  CALL   04E
....................    } 
018D:  INCF   24,F
018E:  GOTO   183
....................      
....................    lcd_send_nibble(2); 
018F:  MOVLW  02
0190:  MOVWF  32
0191:  CALL   063
....................    for(i=0;i<=3;++i) 
0192:  CLRF   24
0193:  MOVF   24,W
0194:  SUBLW  03
0195:  BTFSS  03.0
0196:  GOTO   1A0
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0197:  MOVF   24,W
0198:  CALL   004
0199:  MOVWF  25
019A:  CLRF   2F
019B:  MOVF   25,W
019C:  MOVWF  30
019D:  CALL   075
019E:  INCF   24,F
019F:  GOTO   193
.................... } 
....................  
.................... void lcd_gotoxy(BYTE x, BYTE y) 
.................... { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
*
00B0:  DECFSZ 2C,W
00B1:  GOTO   0B3
00B2:  GOTO   0B6
....................       address=LCD_LINE_TWO; 
00B3:  MOVLW  40
00B4:  MOVWF  2D
....................    else 
00B5:  GOTO   0B7
....................       address=0; 
00B6:  CLRF   2D
....................       
....................    address+=x-1; 
00B7:  MOVLW  01
00B8:  SUBWF  2B,W
00B9:  ADDWF  2D,F
....................    lcd_send_byte(0,0x80|address); 
00BA:  MOVF   2D,W
00BB:  IORLW  80
00BC:  MOVWF  2E
00BD:  CLRF   2F
00BE:  MOVF   2E,W
00BF:  MOVWF  30
00C0:  CALL   075
.................... } 
00C1:  RETURN
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
....................    { 
*
00D7:  MOVF   2A,W
00D8:  XORLW  0C
00D9:  BTFSC  03.2
00DA:  GOTO   0E2
00DB:  XORLW  06
00DC:  BTFSC  03.2
00DD:  GOTO   0EA
00DE:  XORLW  02
00DF:  BTFSC  03.2
00E0:  GOTO   0F0
00E1:  GOTO   0F5
....................       case '\f'   :  lcd_send_byte(0,1); 
00E2:  CLRF   2F
00E3:  MOVLW  01
00E4:  MOVWF  30
00E5:  CALL   075
....................                      delay_ms(2); 
00E6:  MOVLW  02
00E7:  MOVWF  2B
00E8:  CALL   04E
....................                      break; 
00E9:  GOTO   0FB
....................                       
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00EA:  MOVLW  01
00EB:  MOVWF  2B
00EC:  MOVLW  02
00ED:  MOVWF  2C
00EE:  CALL   0B0
00EF:  GOTO   0FB
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
00F0:  CLRF   2F
00F1:  MOVLW  10
00F2:  MOVWF  30
00F3:  CALL   075
00F4:  GOTO   0FB
....................       
....................       default     : lcd_send_byte(1,c);     break; 
00F5:  MOVLW  01
00F6:  MOVWF  2F
00F7:  MOVF   2A,W
00F8:  MOVWF  30
00F9:  CALL   075
00FA:  GOTO   0FB
....................    } 
.................... } 
00FB:  RETURN
....................   
.................... char lcd_getc(BYTE x, BYTE y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
....................   #define LCD_ENABLE_PIN PIN_D0  
....................   #define LCD_RS_PIN     PIN_D1  
....................   #define LCD_RW_PIN     PIN_D2 
....................   #define LCD_DATA4      PIN_D4  
....................   #define LCD_DATA5      PIN_D5  
....................   #define LCD_DATA6      PIN_D6  
....................   #define LCD_DATA7      PIN_D7  
....................  
....................  
....................   #ZERO_RAM 
.................... int i,j,k; 
.................... void config(); 
.................... void code(); 
.................... void main() 
.................... { 
*
01C4:  MOVF   03,W
01C5:  ANDLW  1F
01C6:  MOVWF  03
01C7:  MOVLW  57
01C8:  MOVWF  77
01C9:  MOVLW  20
01CA:  MOVWF  04
01CB:  BCF    03.7
01CC:  CLRF   00
01CD:  INCF   04,F
01CE:  DECFSZ 77,F
01CF:  GOTO   1CC
01D0:  CLRF   78
01D1:  CLRF   79
01D2:  CLRF   7A
01D3:  CLRF   7B
01D4:  CLRF   7C
01D5:  CLRF   7D
01D6:  CLRF   7E
01D7:  MOVLW  50
01D8:  MOVWF  77
01D9:  MOVLW  A0
01DA:  MOVWF  04
01DB:  BCF    03.7
01DC:  CLRF   00
01DD:  INCF   04,F
01DE:  DECFSZ 77,F
01DF:  GOTO   1DC
01E0:  MOVLW  60
01E1:  MOVWF  77
01E2:  MOVLW  10
01E3:  MOVWF  04
01E4:  BSF    03.7
01E5:  CLRF   00
01E6:  INCF   04,F
01E7:  DECFSZ 77,F
01E8:  GOTO   1E5
01E9:  BCF    03.7
01EA:  MOVLW  60
01EB:  MOVWF  77
01EC:  MOVLW  90
01ED:  MOVWF  04
01EE:  BSF    03.7
01EF:  CLRF   00
01F0:  INCF   04,F
01F1:  DECFSZ 77,F
01F2:  GOTO   1EF
01F3:  BCF    03.7
01F4:  CLRF   20
01F5:  CLRF   04
01F6:  BCF    03.7
01F7:  MOVLW  1F
01F8:  ANDWF  03,F
01F9:  BSF    03.5
01FA:  BSF    1F.0
01FB:  BSF    1F.1
01FC:  BSF    1F.2
01FD:  BCF    1F.3
01FE:  MOVLW  07
01FF:  MOVWF  1C
....................  config(); 
*
0203:  GOTO   00C
....................  code(); 
0204:  GOTO   161
.................... } 
.................... void config() 
.................... { 
0205:  SLEEP
....................    setup_adc_ports(NO_ANALOGS); 
*
000C:  BSF    03.5
000D:  BSF    1F.0
000E:  BSF    1F.1
000F:  BSF    1F.2
0010:  BCF    1F.3
....................    setup_adc(ADC_CLOCK_DIV_2); 
0011:  BCF    1F.6
0012:  BCF    03.5
0013:  BCF    1F.6
0014:  BCF    1F.7
0015:  BSF    03.5
0016:  BCF    1F.7
0017:  BCF    03.5
0018:  BSF    1F.0
....................    setup_psp(PSP_DISABLED); 
0019:  BSF    03.5
001A:  BCF    09.4
....................    setup_spi(SPI_SS_DISABLED); 
001B:  BCF    03.5
001C:  BCF    14.5
001D:  BCF    23.5
001E:  MOVF   23,W
001F:  BSF    03.5
0020:  MOVWF  07
0021:  BCF    03.5
0022:  BSF    23.4
0023:  MOVF   23,W
0024:  BSF    03.5
0025:  MOVWF  07
0026:  BCF    03.5
0027:  BCF    23.3
0028:  MOVF   23,W
0029:  BSF    03.5
002A:  MOVWF  07
002B:  MOVLW  01
002C:  BCF    03.5
002D:  MOVWF  14
002E:  MOVLW  00
002F:  BSF    03.5
0030:  MOVWF  14
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1); 
0031:  MOVF   01,W
0032:  ANDLW  C7
0033:  IORLW  08
0034:  MOVWF  01
....................    setup_timer_1(T1_DISABLED); 
0035:  BCF    03.5
0036:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1); 
0037:  MOVLW  00
0038:  MOVWF  78
0039:  MOVWF  12
003A:  MOVLW  00
003B:  BSF    03.5
003C:  MOVWF  12
....................    setup_comparator(NC_NC_NC_NC); 
003D:  MOVLW  07
003E:  MOVWF  1C
003F:  MOVF   05,W
0040:  MOVWF  05
0041:  MOVLW  03
0042:  MOVWF  77
0043:  DECFSZ 77,F
0044:  GOTO   043
0045:  MOVF   1C,W
0046:  BCF    03.5
0047:  BCF    0D.6
....................    setup_vref(FALSE); 
0048:  BSF    03.5
0049:  CLRF   1D
....................  
....................    // TODO: USER CODE!! 
.................... } 
004A:  BCF    03.5
004B:  BCF    0A.3
004C:  BCF    0A.4
004D:  GOTO   204 (RETURN)
.................... void code() 
.................... { 
....................   while(true) 
....................    {  
....................    for(i=0; i<=23; i++) //hours 
*
0161:  CLRF   20
0162:  MOVF   20,W
0163:  SUBLW  17
0164:  BTFSS  03.0
0165:  GOTO   1C0
....................     { 
....................      for(j=0;j<=59;j++) //minutes 
0166:  CLRF   21
0167:  MOVF   21,W
0168:  SUBLW  3B
0169:  BTFSS  03.0
016A:  GOTO   1BE
....................       { 
....................        for(k=0;k<=59;k++) //seconds 
016B:  CLRF   22
016C:  MOVF   22,W
016D:  SUBLW  3B
016E:  BTFSS  03.0
016F:  GOTO   1BC
....................         { 
....................          delay_ms(250); //*** 
0170:  MOVLW  FA
0171:  MOVWF  2B
0172:  CALL   04E
....................          lcd_init();  
....................          lcd_gotoxy(4,2);  
*
01A0:  MOVLW  04
01A1:  MOVWF  2B
01A2:  MOVLW  02
01A3:  MOVWF  2C
01A4:  CALL   0B0
....................          printf(lcd_putc,"%i/%i/%i",i,j,k); //printing clock  
01A5:  MOVF   20,W
01A6:  MOVWF  24
01A7:  MOVLW  1F
01A8:  MOVWF  25
01A9:  CALL   0FC
01AA:  MOVLW  2F
01AB:  MOVWF  2A
01AC:  CALL   0D7
01AD:  MOVF   21,W
01AE:  MOVWF  24
01AF:  MOVLW  1F
01B0:  MOVWF  25
01B1:  CALL   0FC
01B2:  MOVLW  2F
01B3:  MOVWF  2A
01B4:  CALL   0D7
01B5:  MOVF   22,W
01B6:  MOVWF  24
01B7:  MOVLW  1F
01B8:  MOVWF  25
01B9:  CALL   0FC
....................         } 
01BA:  INCF   22,F
01BB:  GOTO   16C
....................        }  
01BC:  INCF   21,F
01BD:  GOTO   167
....................      } 
01BE:  INCF   20,F
01BF:  GOTO   162
....................   } 
01C0:  GOTO   161
.................... } 
01C1:  BCF    0A.3
01C2:  BCF    0A.4
01C3:  GOTO   205 (RETURN)

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NODEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT
